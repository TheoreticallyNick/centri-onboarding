import boto3
from botocore.exceptions import ClientError
import logging
import json
import random
import string
import os
import qrcode
from PIL import Image  
import PIL
import uuid
import decimal
import datetime
from decimal import Decimal
from random import randint
import dateutil
import shutil

# The purpose of this script is to onboard devices during the manufacturing process. This involves:
# 1) Creating a 'thing' in a AWS IoT
# 2) Creating certificates for the 'thing' to allow TCP access to the MQTT broker
# 3) Updating the 'thing' shadow
# 4) Updating the dynamoDB database for the new device

### UPDATE THE FOLLOWING VARIABLES ###
# Variables that will be assigned during manufacturing

#thingGroup = 'Ford_Propane'
#thingGroupArn = 'arn:aws:iot:us-east-2:354778082397:thinggroup/Ford_Propane'

###################################################

class CertGen:

    def __init__(self, MAIN_PATH, MAIN_DIR, provider):
        # Create clients for AWS 
        self.thingClient = boto3.client('iot', region_name='us-east-1')
        self.dynamoClient = boto3.resource('dynamodb', region_name='us-east-1')
        self.s3Client = boto3.client('s3')
        
        # Create autogenerated identification strings for thing
        self.thing_arn = '' # Auto-assigned AWS identifier
        self.thing_id = '' # Auto-assigned AWS identifier (v4 UUID)
        self.thing_name = str(uuid.uuid4()) # UUID assignment
        self.device_auth = randint(100000, 999999) # Auto generated device auth code

        # Create input parameters for thing
        self.default_policy = 'default-logi-policy' # Enter thing policy template
        self.imei = '99' # Enter IMEI Sim Card value
        self.sim = '99' # Enter Sim Card ID value
        self.serial = '1' # Enter device serial number
        self.pub_topic = 'logi2/device/' + self.thing_name # Enter publish topic for the thing
        self.mqtt_schema = '2.0' # Enter MQTT schema version
        self.thing_type = 'LOGI-2' # Enter thing type
        self.provider = provider # Enter provider name (customer)
        self.hw_ver = '2.0' # Enter hardware version
        self.ble_ver = '1.0' # Enter BLE version
        self.lte_ver = '1.0' # Enter LTE version

        # Create a directory for thing keys which includes cert, private, and public keys
        self.main_path = MAIN_PATH
        self.main_dir = MAIN_DIR

        # Create local directories
        self.path = self.main_path + self.thing_name + '/'
        os.mkdir(self.path)
        self.keys_path = self.main_path + self.thing_name + '/keys/'
        os.mkdir(self.keys_path)

        # Create cloud directories in S3
        self.bucket = 'centri-device-certs'
        self.bucket_path = f'{self.thing_type}/{self.main_dir}/{self.thing_name}/'
        self.bucket_key_path = f'{self.thing_type}/{self.main_dir}/{self.thing_name}/keys/'
        self.s3Client.put_object(Bucket = self.bucket, Body = '', Key = self.bucket_path)

    def createThing(self):
        # Creates a 'thing' in AWS-IoT with the properID and 
        
        # 1a. 'create_thing' call to AWS using boto3 client
        response = self.thingClient.create_thing(thingName = self.thing_name, thingTypeName = self.thing_type)
        data = json.loads(json.dumps(response, sort_keys=False, indent=4))

        #print(data)

        # 1b. Extract data from AWS-IoT response
        for element in data: 
            if element == 'thingArn':
                self.thing_arn = data['thingArn']
            elif element == 'thingId':
                self.thing_id = data['thingId']

        # 1c. Add newly created thing to appropriante thing group which corresponds to the customer
        #response = thingClient.add_thing_to_thing_group(thingName = thingName, thingArn = thingArn)             

    def createCertificate(self):
        # 2. creates certificate, private, and public key files for AWS interfacing

        response = self.thingClient.create_keys_and_certificate(setAsActive = True)
        data = json.loads(json.dumps(response, sort_keys=False, indent=4))

        #print(data)

        for element in data:
            if element == 'certificateArn':
                certificate_arn = data['certificateArn']
            elif element == 'keyPair':
                public_key = data['keyPair']['PublicKey']
                private_key = data['keyPair']['PrivateKey']
            elif element == 'certificatePem':
                certificate_pem = data['certificatePem']
            elif element == 'certificateId':
                certificate_id = data['certificateId']

        # 2c. create individual files in the keys directory
        file_path_public_key = self.keys_path + self.thing_name + '.public.key'
        file_object_public_key = self.thing_name + '.public.key'
        with open(file_path_public_key, 'w') as outfile: # Store the key file to google directory
            outfile.write(public_key)
        self.sendToS3(file_path_public_key, file_object_public_key, True) # Send the key file to S3

        file_path_private_key = self.keys_path + self.thing_name + '.private.key'
        file_object_private_key = self.thing_name + '.private.key'
        with open(file_path_private_key, 'w') as outfile: # Store the key file to google directory
            outfile.write(private_key)
        self.sendToS3(file_path_private_key, file_object_private_key, True) # Send the key file to S3

        file_path_cert_key = self.keys_path + self.thing_name + '.cert.pem'
        file_object_cert_key = self.thing_name + '.cert.pem'
        with open(file_path_cert_key, 'w') as outfile: # Store the key file to google directory
            outfile.write(certificate_pem)
        self.sendToS3(file_path_cert_key, file_object_cert_key, True) # Send the key file to S3

        file_path_thing_name = self.keys_path + 'thingName' + '.txt'
        file_object_thing_name = 'thingName' + '.txt'
        with open(file_path_thing_name, 'w') as outfile:
            outfile.write(self.thing_name)
        with open(self.path + 'thingName' + '.txt', 'w') as outfile:
            outfile.write(self.thing_name)
        self.sendToS3(file_path_thing_name, file_object_thing_name, False) # Send the key file to S3

        root_ca_path = "G:/Shared drives/Engineering/Cloud/AWS IoT/create-thing/root-CA.crt"
        shutil.copy2(root_ca_path, self.keys_path)
        self.sendToS3(root_ca_path, 'root-CA.crt', True) # Send the key file to S3

        # 2d. create AWS policy for newly formed thing
        response = self.thingClient.attach_policy(policyName = self.default_policy, target = certificate_arn)
        
        # 2e. attach policy to the newly formed thing
        response = self.thingClient.attach_thing_principal(thingName = self.thing_name, principal = certificate_arn)

    def createQRcode(self):
        qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
        )
        qr.add_data(self.thing_name)
        qr.make(fit=True)

        img = qr.make_image(fill_color='black', back_color='white')

        file_path_qr_img = self.path + 'QR_' + self.thing_name + '.png'
        file_object_qr_img = 'QR_' + self.thing_name + '.png'
        img.save(file_path_qr_img)
        self.sendToS3(file_path_qr_img, file_object_qr_img, False) # Send the key file to S3

    def updateDynamoDB(self):
        current_time_iso = (datetime.datetime.now()).isoformat()
        version = self.hw_ver + ',' + self.ble_ver + ',' + self.lte_ver
        PK = 'DEV#' + self.thing_name
        SK = 'STATUS#' + self.thing_name
        
        table = self.dynamoClient.Table('Centri_Main')
        table.put_item(Item={
            'PK': PK, 
            'SK': SK,
            'Altitude': None,
            'BatteryVolts': None,
            'BirthDate': current_time_iso,
            'BLE_Status': None,
            'CloudDateTimeIso': None,
            'ChargerStatus': None,
            'CycleCount': 0,
            'DailyUsage': None,
            'DateTimeIso': None,
            'DeviceAuth': self.device_auth,
            'DeviceCity': None,
            'DeviceID': self.thing_name,
            'DeviceLevel': None,
            'DeviceState': None,
            'DeviceStatus': '0',
            'DeviceStreet': None,
            'DeviceZip': None,
            'ErrorLog': None,
            'FillDate': None,
            'GPS_SignalQual': None,
            'IMEI': self.imei,
            'Latitude': None,
            'Longitude': None,
            'LTE_SignalQual': None,
            'MQTT_Schema': self.mqtt_schema,
            'Provider': self.provider,
            'Serial': self.serial,
            'SIM': self.sim,
            'SolarVolts': None,
            'TemperatureC': None,
            'Version': version
            })

    def updateShadow(self):
        
        client_shadow = boto3.client('iot-data', region_name='us-east-1')
        shadow = {'state': {'reported': { 'topic': self.pub_topic, 'status': '0', 'device_id': self.thing_name, 'mqtt_schema': self.mqtt_schema, 'device_auth': self.device_auth}}}
        shadow_bytes = json.dumps(shadow).encode('utf-8')
        response = client_shadow.update_thing_shadow(thingName=self.thing_name, payload=shadow_bytes)

    def sendToS3(self, file_path, file_object, key):
        """Upload a file to an S3 bucket

        :param file_name: File to upload
        :param bucket: Bucket to upload to
        :param object_name: S3 object name. If not specified then file_name is used
        :return: True if file was uploaded, else False
        """
        if key == True:
            bucket_object = self.bucket_key_path + file_object
        else:
            bucket_object = self.bucket_path + file_object

        # Upload the file
        try:
            response = self.s3Client.upload_file(file_path, self.bucket, bucket_object)

        except ClientError as e:
            logging.error(e)

if __name__ == "__main__":

    cert_qty = 5 # Enter the number of devices we want to create certs for.
    provider = 'Ford Propane' # Enter the customer

    eastern = dateutil.tz.gettz('US/Eastern')
    current_time_iso = (datetime.datetime.now()).isoformat()
    current_time = datetime.datetime.now(tz=eastern).strftime("%m-%d-%y")

    
    MAIN_DIR = "CertGen - " + current_time
    MAIN_PATH = f"G:/Shared drives/Engineering/Devices/LOGI-2/Device Keys/live devices/{MAIN_DIR}/"

    try:    
        os.mkdir(MAIN_PATH)

    except FileExistsError:
        print("Identical file exists, program will use the existing folder.")


    for i in range(cert_qty): 
        dev = CertGen(MAIN_PATH, MAIN_DIR, provider)

        # 1. create thing in AWS-IoT
        dev.createThing()
        
        # 2. create thing certificates
        dev.createCertificate()

        # 3. generate QR code
        dev.createQRcode()

        # 4. update device shadow
        dev.updateShadow()

        # 5. update dynamoDB table
        dev.updateDynamoDB()

        print(f"Device cloud instance successfully created for: {dev.thing_name}")


